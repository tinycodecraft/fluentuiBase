@page "/students"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject ExampleJsInterop InterJs
@rendermode InteractiveServer

<PageTitle>Students</PageTitle>

<h1>Students</h1>

<QuickGrid Items="@students" Pagination="@pagination">
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(_ => _.Id)" Sortable="true" />
    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Title="Name" SortBy="@sortByName">
        <div class="flex items-center">
            <nobr>
                <strong>@context.FirstName @context.LastName</strong>
            </nobr>
        </div>
    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(_ => _.School)" Sortable="true" />
</QuickGrid>

<Paginator State="@pagination" />

<a href="#" @onclick="OnCallInterJs">Click Me (Example to inject JavaScript to invoke)</a>





@code {
    IQueryable<Student> students = Student.GetStudents();
    Microsoft.AspNetCore.Components.QuickGrid.PaginationState pagination = new Microsoft.AspNetCore.Components.QuickGrid.PaginationState { ItemsPerPage = 10 };

    Microsoft.AspNetCore.Components.QuickGrid.GridSort<Student> sortByName = Microsoft.AspNetCore.Components.QuickGrid.GridSort<Student>
    .ByAscending(_ => _.FirstName).ThenAscending(_ => _.LastName);

    private async Task OnCallInterJs() => await InterJs.Prompt("Please Give Student Name?");
}
