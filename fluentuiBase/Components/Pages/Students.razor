@using Microsoft.AspNetCore.Components.QuickGrid

@inject ExampleJsInterop InterJs
@rendermode InteractiveServer

<LayoutView Layout="typeof(FluentuiLayout)">
    <PageTitle>Students</PageTitle>
    <HeadContent>
        <style>
            main { background: #f0f088; }
        </style>
    </HeadContent>
    <div class="text-center">
        <h1 class="display-4">Welcome</h1>
        <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
        @if (UserName != null)
        {
            <p>First User Name: <span>@UserName</span></p>
        }
    </div>
    <h1>Students</h1>

    <QuickGrid Items="@students" Pagination="@pagination">
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(_ => _.Id)" Sortable="true" />
        <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Title="Name" SortBy="@sortByName">
            <div class="flex items-center">
                <nobr>
                    <strong>@context.FirstName @context.LastName</strong>
                </nobr>
            </div>
        </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(_ => _.School)" Sortable="true" />
    </QuickGrid>

    <Paginator State="@pagination" />

    <a href="#" @onclick="OnCallInterJs">Click Me (Example to inject JavaScript to invoke)</a>

</LayoutView>






@code {
    [Parameter]
    public string UserName { get; set; }

    IQueryable<Student> students = Student.GetStudents();
    Microsoft.AspNetCore.Components.QuickGrid.PaginationState pagination = new Microsoft.AspNetCore.Components.QuickGrid.PaginationState { ItemsPerPage = 10 };

    Microsoft.AspNetCore.Components.QuickGrid.GridSort<Student> sortByName = Microsoft.AspNetCore.Components.QuickGrid.GridSort<Student>
    .ByAscending(_ => _.FirstName).ThenAscending(_ => _.LastName);

    private async Task OnCallInterJs() => await InterJs.Prompt("Please Give Student Name?");
}
